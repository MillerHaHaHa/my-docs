import{_ as e,o as n,c as i,e as a}from"./app-CmOngkEL.js";const s={},t=a(`<h1 id="sdio-wifi-驱动适配" tabindex="-1"><a class="header-anchor" href="#sdio-wifi-驱动适配"><span>sdio wifi 驱动适配</span></a></h1><ul><li><a href="#sdio-wifi-%E9%A9%B1%E5%8A%A8%E9%80%82%E9%85%8D">sdio wifi 驱动适配</a><ul><li><a href="#11-%E6%A6%82%E8%BF%B0">1.1 概述</a></li><li><a href="#12-%E5%86%85%E6%A0%B8%E9%85%8D%E7%BD%AE">1.2 内核配置</a><ul><li><a href="#121-%E6%89%93%E5%BC%80%E6%A0%88%E4%BF%9D%E6%8A%A4">1.2.1 打开栈保护</a></li><li><a href="#122-%E4%BF%AE%E6%94%B9-linux-%E8%AE%BE%E5%A4%87%E6%A0%91%E6%B7%BB%E5%8A%A0-sdio-%E4%B8%AD%E6%96%AD">1.2.2 修改 linux 设备树，添加 SDIO 中断</a></li><li><a href="#123-%E4%BF%AE%E6%94%B9%E7%9B%B8%E4%BD%8D%E5%81%8F%E7%A7%BB">1.2.3 修改相位偏移</a></li></ul></li><li><a href="#13-%E9%85%8D%E7%BD%AE-sdio-%E7%AE%A1%E8%84%9A%E5%A4%8D%E7%94%A8">1.3 配置 SDIO 管脚复用</a></li><li><a href="#14-%E7%BC%96%E8%AF%91wifi%E9%A9%B1%E5%8A%A8%E4%BB%A3%E7%A0%81">1.4 编译wifi驱动代码</a></li><li><a href="#15-%E7%BC%96%E8%AF%91%E7%AC%AC%E4%B8%89%E6%96%B9%E5%B7%A5%E5%85%B7">1.5 编译第三方工具</a><ul><li><a href="#151-%E4%B8%8B%E8%BD%BD%E7%AC%AC%E4%B8%89%E6%96%B9%E5%B7%A5%E5%85%B7">1.5.1 下载第三方工具</a></li><li><a href="#152-%E4%BF%AE%E6%94%B9%E7%BC%96%E8%AF%91%E9%85%8D%E7%BD%AE">1.5.2 修改编译配置</a></li><li><a href="#153-%E7%BC%96%E8%AF%91">1.5.3 编译</a></li></ul></li><li><a href="#16-%E8%BD%BD%E5%85%A5%E9%A9%B1%E5%8A%A8%E5%92%8C%E7%AC%AC%E4%B8%89%E6%96%B9%E5%B7%A5%E5%85%B7">1.6 载入驱动和第三方工具</a></li><li><a href="#17-wifi%E8%AE%BE%E5%A4%87%E6%A3%80%E6%B5%8B">1.7 wifi设备检测</a></li><li><a href="#18-%E5%8A%A0%E8%BD%BD%E9%A9%B1%E5%8A%A8">1.8 加载驱动</a></li><li><a href="#19-%E5%90%AF%E5%8A%A8-ap-%E5%92%8C-udhcpd">1.9 启动 ap 和 udhcpd</a></li></ul></li></ul><h2 id="_1-1-概述" tabindex="-1"><a class="header-anchor" href="#_1-1-概述"><span>1.1 概述</span></a></h2><p>sdio 提供标准接口对接外围设备，本文以 Hi3881 为例，说明在 sdk 上适配 sdio wifi 的过程。</p><h2 id="_1-2-内核配置" tabindex="-1"><a class="header-anchor" href="#_1-2-内核配置"><span>1.2 内核配置</span></a></h2><h3 id="_1-2-1-打开栈保护" tabindex="-1"><a class="header-anchor" href="#_1-2-1-打开栈保护"><span>1.2.1 打开栈保护</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>    -&gt;General setup
        -&gt;Stack Protector buffer overflow detection
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>选择strong</p><h3 id="_1-2-2-修改-linux-设备树-添加-sdio-中断" tabindex="-1"><a class="header-anchor" href="#_1-2-2-修改-linux-设备树-添加-sdio-中断"><span>1.2.2 修改 linux 设备树，添加 SDIO 中断</span></a></h3><p><code>linux-4.9.y/arch/arm/boot/dts/xm720xxx.dtsi</code> 文件中配置对应的 mmc 属性中增加 <code>cap-sdio-irq</code>，如图所示：</p><div class="language-dts line-numbers-mode" data-ext="dts" data-title="dts"><pre class="language-dts"><code>        mmc1: sdhci@0x10020000 {
            compatible = &quot;xmedia,sdhci&quot;;
            reg = &lt;0x10020000 0x1000&gt;;
            interrupts = &lt;0 31 4&gt;;
            clocks = &lt;&amp;clock XM720XXX_MMC1_CLK&gt;;
            clock-names = &quot;mmc_clk&quot;;
            resets = &lt;&amp;clock 0x22c 27&gt;, &lt;&amp;clock 0x22c 29&gt;;
            reset-names = &quot;crg_reset&quot;, &quot;dll_reset&quot;;
            max-frequency = &lt;50000000&gt;;
            crg_regmap = &lt;&amp;clock&gt;;
            iocfg_regmap = &lt;&amp;iocfg_ctrl2&gt;;
            bus-width = &lt;4&gt;;
            cap-sd-highspeed;
            full-pwr-cycle;
            cap-sdio-irq;
            devid = &lt;2&gt;;
            status = &quot;enable&quot;;
        };
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-3-修改相位偏移" tabindex="-1"><a class="header-anchor" href="#_1-2-3-修改相位偏移"><span>1.2.3 修改相位偏移</span></a></h3><p>为保证与 SDIO 对接芯片的正常工作，需要 SDIO Host 控制器的接收方向采样时钟进行相位偏移，请根据具体硬件修改。</p><p>对于 VDDIO=3.3V 时，Host 控制器的采样时钟相位偏移 90 度。</p><p>对于 VDDIO=1.8V 时，Host 控制器的采样时钟相位偏移 135 度。</p><p>示例：当采样时钟为 50MHz 时，相位偏移 90 度即为延时 5 ns，相位偏移 135 度即为延时 7.5 ns。</p><p>VDDIO = 3.3V 的配置步骤如下： <code>linux-4.9.y/drivers/mmc/host/sdhci-xm720xxx.c</code>， 在 <code>static void bsp_get_phase(struct sdhci_host *host) </code> 函数中修改为： <code>bsp_priv-&gt;sampl_phase = 8/fix_num; //4为45度，8为90度，16为180度</code></p><p>如图所示：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token operator">-&gt;</span>mmc<span class="token operator">-&gt;</span>ios<span class="token punctuation">.</span>timing <span class="token operator">==</span> MMC_TIMING_SD_HS<span class="token punctuation">)</span> <span class="token operator">||</span>
            <span class="token punctuation">(</span>host<span class="token operator">-&gt;</span>mmc<span class="token operator">-&gt;</span>ios<span class="token punctuation">.</span>timing <span class="token operator">==</span> MMC_TIMING_UHS_SDR25<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bsp_priv<span class="token operator">-&gt;</span>drv_phase <span class="token operator">=</span> <span class="token number">16</span><span class="token operator">/</span>fix_num<span class="token punctuation">;</span>  <span class="token comment">/* 16 for 180 degree */</span>
            bsp_priv<span class="token operator">-&gt;</span>sampl_phase <span class="token operator">=</span> <span class="token number">8</span><span class="token operator">/</span>fix_num<span class="token punctuation">;</span> <span class="token comment">/* 4 for 45 degree */</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">/* UHS_SDR12 */</span>
            bsp_priv<span class="token operator">-&gt;</span>drv_phase <span class="token operator">=</span> <span class="token number">16</span><span class="token operator">/</span>fix_num<span class="token punctuation">;</span>  <span class="token comment">/* 16 for 180 degree */</span>
            bsp_priv<span class="token operator">-&gt;</span>sampl_phase <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/* 0 for 0 degree */</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改后需重新编译kernel</p><h2 id="_1-3-配置-sdio-管脚复用" tabindex="-1"><a class="header-anchor" href="#_1-3-配置-sdio-管脚复用"><span>1.3 配置 SDIO 管脚复用</span></a></h2><p>请根据硬件设计将 xm720xxx 的管脚复用为 SDIO 模式</p><p>管脚复用方法：</p><ul><li>配置 uboot 表格</li><li>系统启动脚本中使用 xmmm</li><li>命令配置寄存器</li><li>在 wifi 驱动代码中添加代码配置寄存器</li><li>其它方式</li></ul><p>以修改 uboot 表格为例，请参照管脚复用表格配置相应的寄存器</p><table><thead><tr><th>register</th><th>offset Address</th><th>value W to or R fr Reg</th><th>delay</th><th>Read or Write</th><th>bits to be read or written</th><th>start bit</th><th>register attribute</th></tr></thead><tbody><tr><td>iocfg_reg33</td><td>0x112C0048</td><td>0x1D54</td><td>0</td><td>write</td><td>31</td><td>0</td><td>0x000000FD</td></tr><tr><td>iocfg_reg34</td><td>0x112C004C</td><td>0x1174</td><td>0</td><td>write</td><td>31</td><td>0</td><td>0x000000FD</td></tr><tr><td>iocfg_reg40</td><td>0x112C0064</td><td>0x1174</td><td>0</td><td>write</td><td>31</td><td>0</td><td>0x000000FD</td></tr><tr><td>iocfg_reg39</td><td>0x112C0060</td><td>0x1174</td><td>0</td><td>write</td><td>31</td><td>0</td><td>0x000000FD</td></tr><tr><td>iocfg_reg38</td><td>0x112C005C</td><td>0x1174</td><td>0</td><td>write</td><td>31</td><td>0</td><td>0x000000FD</td></tr><tr><td>iocfg_reg37</td><td>0x112C0058</td><td>0x1174</td><td>0</td><td>write</td><td>31</td><td>0</td><td>0x000000FD</td></tr></tbody></table><p>修改后需重新编译uboot</p><h2 id="_1-4-编译wifi驱动代码" tabindex="-1"><a class="header-anchor" href="#_1-4-编译wifi驱动代码"><span>1.4 编译wifi驱动代码</span></a></h2><p>请参考 wifi 厂商的相关文档进行驱动的编译，以下均为参考 hi3881 的文档的描述。</p><p>请根据硬件设计适配 SDIO 所属的MMC接口，用于 SDIO 卡到位检测，修改 wifi 驱动 SDK 中的：</p><p><code>driver/oal/oal_sdio_host.c</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>s32 <span class="token function">oal_sdio_detect_to_core</span><span class="token punctuation">(</span>s32 val<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">sdio_card_detect_change</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译 wifi 驱动，修改 wifi 驱动SDK下 Makefile 中， <code>CROSS_COMPILE</code> 为交叉编译工具链名称、 <code>KDIR</code> 为已经编译好的内核路径、 <code>ARCH</code> 为平台类型， 然后执行脚本 <code>build.sh</code> 编译。 如图：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>KDIR=/home/test/XmediaIPCLinuxVxxxRxxxSPCxxx/out/xm720xxx/linux-4.9.y
ARCH=arm
CROSS_COMPILE=arm-gcc7.3-linux-musleabi-
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以module模式编译命令(示例)：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>HODT_PLATFORM=XM72020330 sh build.sh -m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_1-5-编译第三方工具" tabindex="-1"><a class="header-anchor" href="#_1-5-编译第三方工具"><span>1.5 编译第三方工具</span></a></h2><p>请参考 wifi 厂商的相关文档进行驱动的编译，以下均为参考 hi3881 的文档的描述。</p><h3 id="_1-5-1-下载第三方工具" tabindex="-1"><a class="header-anchor" href="#_1-5-1-下载第三方工具"><span>1.5.1 下载第三方工具</span></a></h3><ul><li>hostapd</li><li>wpa_supplicant</li><li>libnl</li></ul><h3 id="_1-5-2-修改编译配置" tabindex="-1"><a class="header-anchor" href="#_1-5-2-修改编译配置"><span>1.5.2 修改编译配置</span></a></h3><p>将 wpa_supplicant, hostapd 和 libnl 压缩文件拷贝到 wifi 驱动 SDK 的 components/linux/wpa_supplicant/, components/linux/hostapd/和components/linux/libnl/ 目录下。并解压 wpa 压缩包，用 components/linux/wpa_supplicant/ 目录里面的 defconfig 替换解压出的目录中wpa_supplicant/defconfig，重新压缩文件。 修改 wifi 驱动 SDK 中 components/linux/Makefile 文件中的交叉编译工具链以及 wpa_supplicant，hostapd，libnl 目录下 Makefile 中的交叉编译工具链：</p><p><code>CROSS_COMPILE ?= arm-gcc7.3-linux-musleabi-</code></p><h3 id="_1-5-3-编译" tabindex="-1"><a class="header-anchor" href="#_1-5-3-编译"><span>1.5.3 编译</span></a></h3><p><code>make tools</code></p><p>生成的目标文件在components/linux/out目录下</p><h2 id="_1-6-载入驱动和第三方工具" tabindex="-1"><a class="header-anchor" href="#_1-6-载入驱动和第三方工具"><span>1.6 载入驱动和第三方工具</span></a></h2><p>请参考 wifi 厂商的相关文档进行驱动的编译，以下均为参考 hi3881 的文档的描述。</p><ul><li>驱动文件拷贝</li></ul><p>若80211在内核中为buildin模式则不需要拷贝cfg80211.ko驱动，若为module模式cfg80211.ko位置如下：</p><p><code>/home/test/XmediaIPCLinuxVxxxRxxxSPCxxx/out/xm720xxx/linux-4.9.y/net/wireless/cfg80211.ko</code></p><p>wifi驱动生成位置如下：</p><p><code>driver/hi3881.ko</code></p><p>将以上驱动拷贝到单板上的 <code>/kmod</code> 目录下</p><p>在单板中新建目录</p><p><code>mkdir -p /vendor/firmware/hisilicon</code></p><p>将wifi驱动SDK中的</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>firmware/wifi_fw.bin
firmware/wifi_cfg/ce/wifi_cfg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>拷贝到单板/vendor/firmware/hisilicon目录下</p><ul><li>生成动态链接</li></ul><p>将wifi驱动SDK中的</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>components/linux/out/libnl-3.so.200.26.0
components/linux/out/libnl-genl-3.so.200.26.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>复制到单板的 <code>/lib</code> 目录下。</p><p>进入目录，创建这两个文件的软连接：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>ln -s libnl-3.so.200.26.0 libnl-3.so.200
ln -s libnl-genl-3.so.200.26.0 libnl-genl-3.so.200
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>sta模式：将wifi驱动SDK中的</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>components/linux/out/wpa_supplicant
components/linux/out/wpa_cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>拷贝到单板的<code>/bin</code>下，并添加执行权限（AP模式不需要）</p><ul><li>ap模式：将wifi驱动SDK中的</li></ul><p><code>components/linux/hostapd/entropy.bin</code></p><p>文件放到单板的 <code>/etc/Wireless</code>（若没有则新建）目录下。 将wifi驱动SDK中的</p><p><code>components/linux/out/hostapd</code></p><p>拷贝到单板的<code>/bin</code>下，并添加执行权限</p><h2 id="_1-7-wifi设备检测" tabindex="-1"><a class="header-anchor" href="#_1-7-wifi设备检测"><span>1.7 wifi设备检测</span></a></h2><p>加载驱动前需要先检测到SDIO设备，可以通过查看 mci_info 来查看是否检测到 SDIO 设备：</p><p><code>cat /proc/mci/mci_info</code></p><p>如图，有 MCI 信息即为成功检测到 SDIO 设备：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>MCI0: unplugged_disconnected
MCI1: pluged_connected
        Type: SDIO card Mode: HS
        Speed Class: Class <span class="token number">0</span>
        Uhs Speed Grade: Less than 10MB/sec<span class="token punctuation">(</span>0h<span class="token punctuation">)</span>
        Host work clock: 50MHz
        Card support clock: 50MHz
        Card work clock: 50MHz
        Card error count: <span class="token number">0</span>
MCI2: invalid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有 MCI 信息，一般多是硬件链路问题，请检查</p><ul><li>wifi 模块是否正常工作，</li><li>wifi enable 引脚是否使能</li><li>sdio 线路是否正常</li><li>sdio 电压域是否配置正确</li><li>其他硬件原因</li></ul><h2 id="_1-8-加载驱动" tabindex="-1"><a class="header-anchor" href="#_1-8-加载驱动"><span>1.8 加载驱动</span></a></h2><p>若 80211 在内核中为 buildin 模式则不需要加载 cfg80211.ko 驱动，若为 module 模式则</p><p>执行命令加载驱动：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>insmod /komod/cfg80211.ko
insmod /komod/hi3881.ko g_mode=1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置 hostapd.conf，通过配置 hostapd.conf 可以配置 ap 的不同属性（SSID、信道、加密方式等） 测试配置如下：</p><p><code>/etc/Wireless/hostapd.conf</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>interface=ap0
driver=nl80211
ctrl_interface=/var/hostapd
ssid=Test_AP
channel=6
hw_mode=g
ieee80211n=1
ht_capab=[SHORT-GI-20]
wpa=2
wpa_key_mgmt=WPA-PSK
wpa_passphrase=12345678
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置含义为名称为 Test_AP，密码为 12345678 的 hostap；若不需要密码，注释掉最后三行。</p><p>配置udhcpd：udhcpd 需要配置文件 <code>/etc/Wireless/udhcpd.config</code>，参考配置如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># The start and end of the IP lease block
start           192.168.1.20 
end             192.168.1.254

# The interface that udhcpd will use
interface       ap0

opt dns 192.168.1.2 192.168.10.10
option  subnet  255.255.255.0
opt router  192.168.1.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-9-启动-ap-和-udhcpd" tabindex="-1"><a class="header-anchor" href="#_1-9-启动-ap-和-udhcpd"><span>1.9 启动 ap 和 udhcpd</span></a></h2><p>启动hostapd： <code>hostapd -e/etc/Wireless/entropy.bin /etc/Wireless/hostapd.conf &amp;</code></p><p>如图：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>~ # hostapd -e/etc/Wireless/entropy.bin /etc/Wireless/hostapd.conf &amp;
Configuration file: /etc/Wireless/hostapd.conf
HT (IEEE 802.11n) with WPA/WPA2 requires CCMP/GCMP to be enabled, disabling HT capabilities
OK
ap0: Could not connect to kernel driver
Using interface ap0 with hwaddr 8a:11:31:0f:40:6b and ssid &quot;Test_AP&quot;
random: Cannot read from /dev/random: Resource temporarily unavailable
random: Only 0/20 bytes of strong random data available
random: Allow operation to proceed based on internal entropy
ap0: interface state UNINITIALIZED-&gt;ENABLED
ap0: AP-ENABLED
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动udhcpd：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>ifconfig ap0 192.168.1.1
udhcpd -fS /etc/Wireless/udhcpd.config &amp;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如图：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>udhcpd: started, v1.26.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用设备连接，udhcpd 会自动为其分配地址： 如图：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>ap0: STA be:11:31:69:26:6d IEEE 802.11: associated
random: Cannot read from /dev/random: Resource temporarily unavailable
random: Only 0/20 bytes of strong random data available
random: Allow operation to proceed based on internal entropy
ap0: AP-STA-CONNECTED be:11:31:69:26:6d
ap0: STA be:11:31:69:26:6d RADIUS: starting accounting session 94C28C301BDBCE7E
ap0: STA be:11:31:69:26:6d WPA: pairwise key handshake completed (RSN)

udhcpd: sending OFFER of 192.168.1.20
udhcpd: sending ACK to 192.168.1.20
udhcpd: sending ACK to 192.168.1.20
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ping 该地址测试，如图：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>PING 192.168.1.20 (192.168.1.20): 56 data bytes
64 bytes from 192.168.1.20: seq=0 ttl=64 time=41.493 ms
64 bytes from 192.168.1.20: seq=1 ttl=64 time=60.842 ms
64 bytes from 192.168.1.20: seq=2 ttl=64 time=75.575 ms
64 bytes from 192.168.1.20: seq=3 ttl=64 time=93.313 ms
^C
--- 192.168.1.20 ping statistics ---
4 packets transmitted, 4 packets received, 0% packet loss
round-trip min/avg/max = 41.493/67.805/93.313 ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此AP启动成功。</p><h2 id="_1-10-sta-模式和-udhcpc" tabindex="-1"><a class="header-anchor" href="#_1-10-sta-模式和-udhcpc"><span>1.10 sta 模式和 udhcpc</span></a></h2><h3 id="_1-10-1-准备-udhcpc-配置" tabindex="-1"><a class="header-anchor" href="#_1-10-1-准备-udhcpc-配置"><span>1.10.1 准备 udhcpc 配置</span></a></h3><p>拷贝 <code>sdk/out/xm72020330/rootfs_builddir/busybox-1_26_2/examples/udhcp/simple.script</code> 到板端 udhcpc 的默认配置路径 <code>/usr/share/udhcpc/default.script</code></p><h3 id="_1-10-2-编译-wpa-supplicant" tabindex="-1"><a class="header-anchor" href="#_1-10-2-编译-wpa-supplicant"><span>1.10.2 编译 wpa_supplicant</span></a></h3><p>https://blog.csdn.net/Turix/article/details/112910483</p><h3 id="_1-10-3-准备-wpa-supplicant-配置文件" tabindex="-1"><a class="header-anchor" href="#_1-10-3-准备-wpa-supplicant-配置文件"><span>1.10.3 准备 wpa_supplicant 配置文件</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>ctrl_interface=/var/run/wpa_supplicant
update_config=1

network={
	ssid=&quot;wifi-ssid&quot;
	psk=&quot;wifi-psk&quot;
	key_mgmt=WPA-PSK
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-10-4-运行" tabindex="-1"><a class="header-anchor" href="#_1-10-4-运行"><span>1.10.4 运行</span></a></h3><p>连接 Wi-Fi</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>wpa_supplicant -B -i wlan0 -c /etc/wpa_supplicant.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>自动获取 IP</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>udhcpc -i wlan0 &amp;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询 Wi-Fi 状态</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>wpa_cli -i wlan0 status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,117),d=[t];function l(c,p){return n(),i("div",null,d)}const o=e(s,[["render",l],["__file","sdiowifi驱动适配.html.vue"]]),u=JSON.parse('{"path":"/work/goke/sdiowifi%E9%A9%B1%E5%8A%A8%E9%80%82%E9%85%8D.html","title":"sdio wifi 驱动适配","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1.1 概述","slug":"_1-1-概述","link":"#_1-1-概述","children":[]},{"level":2,"title":"1.2 内核配置","slug":"_1-2-内核配置","link":"#_1-2-内核配置","children":[{"level":3,"title":"1.2.1 打开栈保护","slug":"_1-2-1-打开栈保护","link":"#_1-2-1-打开栈保护","children":[]},{"level":3,"title":"1.2.2 修改 linux 设备树，添加 SDIO 中断","slug":"_1-2-2-修改-linux-设备树-添加-sdio-中断","link":"#_1-2-2-修改-linux-设备树-添加-sdio-中断","children":[]},{"level":3,"title":"1.2.3 修改相位偏移","slug":"_1-2-3-修改相位偏移","link":"#_1-2-3-修改相位偏移","children":[]}]},{"level":2,"title":"1.3 配置 SDIO 管脚复用","slug":"_1-3-配置-sdio-管脚复用","link":"#_1-3-配置-sdio-管脚复用","children":[]},{"level":2,"title":"1.4 编译wifi驱动代码","slug":"_1-4-编译wifi驱动代码","link":"#_1-4-编译wifi驱动代码","children":[]},{"level":2,"title":"1.5 编译第三方工具","slug":"_1-5-编译第三方工具","link":"#_1-5-编译第三方工具","children":[{"level":3,"title":"1.5.1 下载第三方工具","slug":"_1-5-1-下载第三方工具","link":"#_1-5-1-下载第三方工具","children":[]},{"level":3,"title":"1.5.2 修改编译配置","slug":"_1-5-2-修改编译配置","link":"#_1-5-2-修改编译配置","children":[]},{"level":3,"title":"1.5.3 编译","slug":"_1-5-3-编译","link":"#_1-5-3-编译","children":[]}]},{"level":2,"title":"1.6 载入驱动和第三方工具","slug":"_1-6-载入驱动和第三方工具","link":"#_1-6-载入驱动和第三方工具","children":[]},{"level":2,"title":"1.7 wifi设备检测","slug":"_1-7-wifi设备检测","link":"#_1-7-wifi设备检测","children":[]},{"level":2,"title":"1.8 加载驱动","slug":"_1-8-加载驱动","link":"#_1-8-加载驱动","children":[]},{"level":2,"title":"1.9 启动 ap 和 udhcpd","slug":"_1-9-启动-ap-和-udhcpd","link":"#_1-9-启动-ap-和-udhcpd","children":[]},{"level":2,"title":"1.10 sta 模式和 udhcpc","slug":"_1-10-sta-模式和-udhcpc","link":"#_1-10-sta-模式和-udhcpc","children":[{"level":3,"title":"1.10.1 准备 udhcpc 配置","slug":"_1-10-1-准备-udhcpc-配置","link":"#_1-10-1-准备-udhcpc-配置","children":[]},{"level":3,"title":"1.10.2 编译 wpa_supplicant","slug":"_1-10-2-编译-wpa-supplicant","link":"#_1-10-2-编译-wpa-supplicant","children":[]},{"level":3,"title":"1.10.3 准备 wpa_supplicant 配置文件","slug":"_1-10-3-准备-wpa-supplicant-配置文件","link":"#_1-10-3-准备-wpa-supplicant-配置文件","children":[]},{"level":3,"title":"1.10.4 运行","slug":"_1-10-4-运行","link":"#_1-10-4-运行","children":[]}]}],"git":{"updatedTime":1750054698000,"contributors":[{"name":"huangmingle","email":"huangmingle@goke.com","commits":1}]},"filePathRelative":"work/goke/sdiowifi驱动适配.md"}');export{o as comp,u as data};
