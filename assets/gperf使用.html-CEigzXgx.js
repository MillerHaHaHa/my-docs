import{_ as n,r as s,o as i,c as l,a as e,b as t,d as r,e as d}from"./app-CmOngkEL.js";const p={},o=d(`<h1 id="gperftools-使用" tabindex="-1"><a class="header-anchor" href="#gperftools-使用"><span>gperftools 使用</span></a></h1><h2 id="内存检测" tabindex="-1"><a class="header-anchor" href="#内存检测"><span>内存检测</span></a></h2><h2 id="_1、使用方法-预加载方式" tabindex="-1"><a class="header-anchor" href="#_1、使用方法-预加载方式"><span>1、使用方法 - 预加载方式</span></a></h2><p><strong>链接库</strong></p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>-ltcmalloc_and_profiler
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>添加环境变量</strong></p><p><strong>内存用量检测</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>export HEAPPROFILE=linux_out.hprof
export HEAPPROFILESIGNAL=12
export HEAP_PROFILE_ALLOCATION_INTERVAL=524288
export LD_PRELOAD=/system/lib/libtcmalloc.so
/system/bin/app_main -f /system/config/config.json -d /userdata/device &amp;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>内存泄漏检测</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>HEAPCHECK=normal LD_PRELOAD=&quot;/system/lib/libtcmalloc.so&quot; ./build_linux/linux_out
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>运行程序</strong></p><p><strong>生成报告</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>killall -12 linux_out
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2、使用方法-头文件方式" tabindex="-1"><a class="header-anchor" href="#_2、使用方法-头文件方式"><span>2、使用方法 - 头文件方式</span></a></h2><p><strong>包含头文件</strong></p><div class="language-c_cpp line-numbers-mode" data-ext="c_cpp" data-title="c_cpp"><pre class="language-c_cpp"><code>#include &lt;gperftools/heap-profiler.h&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>调用函数</strong></p><p>开始调用</p><div class="language-c_cpp line-numbers-mode" data-ext="c_cpp" data-title="c_cpp"><pre class="language-c_cpp"><code>int HeapProfilerStart(const char* fname); // fname是***.heap文件的前缀
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>结束调用</strong></p><div class="language-c_cpp line-numbers-mode" data-ext="c_cpp" data-title="c_cpp"><pre class="language-c_cpp"><code>void HeapProfilerDump(const char* reason);
void HeapProfilerStop();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>链接库</strong></p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>-ltcmalloc_and_profiler
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>运行程序</strong></p><p>可以设置堆内存使用多大，生成一个片段 524288 512k</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">HEAP_PROFILE_ALLOCATION_INTERVAL</span><span class="token operator">=</span><span class="token number">10485760</span>  ./bin/kvsWebrtcClientMaster
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>结束程序，生成 heap</strong></p><br><h2 id="_2、生成分析报告" tabindex="-1"><a class="header-anchor" href="#_2、生成分析报告"><span>2、生成分析报告</span></a></h2><h3 id="_2-1-heap-profiler" tabindex="-1"><a class="header-anchor" href="#_2-1-heap-profiler"><span>2.1 heap profiler</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pprof <span class="token parameter variable">--pdf</span> <span class="token parameter variable">--lines</span> <span class="token parameter variable">--heapcheck</span> <span class="token parameter variable">--alloc_space</span> build_linux/linux_out linux_out.hprof.0001.heap <span class="token operator">&gt;</span> out.pdf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pprof <span class="token parameter variable">--pdf</span> <span class="token parameter variable">--inuse_objects</span> <span class="token parameter variable">--lines</span> <span class="token parameter variable">--heapcheck</span>  <span class="token parameter variable">--edgefraction</span><span class="token operator">=</span>1e-10 <span class="token parameter variable">--nodefraction</span><span class="token operator">=</span>1e-10 build_linux/linux_out linux_out.heap.0001.heap <span class="token operator">&gt;</span> out.pdf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pprof  ./bin/kvsWebrtcClientMaster ./gmem/test.log.0001.heap <span class="token operator">&gt;</span> out.pdf  <span class="token parameter variable">--lines</span>   <span class="token parameter variable">--inuse_objects</span> <span class="token parameter variable">--heapcheck</span> <span class="token parameter variable">--pdf</span> <span class="token parameter variable">--inuse_objects</span> <span class="token parameter variable">--lines</span> <span class="token parameter variable">--heapcheck</span>  <span class="token parameter variable">--edgefraction</span><span class="token operator">=</span>1e-10 <span class="token parameter variable">--nodefraction</span><span class="token operator">=</span>1e-10 <span class="token parameter variable">--text</span> <span class="token parameter variable">--cum</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>分析模式</p><p>--inuse_space Display the number of in-use megabytes (i.e. space that has been allocated but not freed). This is the default. --inuse_objects Display the number of in-use objects (i.e. number of objects that have been allocated but not freed). --alloc_space Display the number of allocated megabytes. This includes the space that has since been de-allocated. Use this if you want to find the main allocation sites in the program. --alloc_objects Display the number of allocated objects. This includes the objects that have since been de-allocated. Use this if you want to find the main allocation sites in the program.</p></blockquote><p>官网生成</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>pprof ./test &quot;/tmp/test.3362._main_-end.heap&quot; --inuse_objects --lines --heapcheck  --edgefraction=1e-10 --nodefraction=1e-10 --pdf &gt; out.pdf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>交叉报告</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>pprof ~/project/1016_ipc_application_fw_m219e/output/rootfs/system/bin/app_main m219e.0001.heap --lib_prefix ~/project/1016_ipc_application_fw_m219e/output/rootfs --inuse_objects --lines --heapcheck --edgefraction=1e-10 --nodefraction=1e-10 --pdf &gt; leak.pdf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-2-profiler" tabindex="-1"><a class="header-anchor" href="#_2-2-profiler"><span>2.2 profiler</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pprof <span class="token parameter variable">--pdf</span> build_linux/linux_out linux_out.prof <span class="token operator">&gt;</span> out.pdf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pprof <span class="token parameter variable">--text</span> <span class="token parameter variable">--lines</span> build_linux/linux_out linux_out.prof <span class="token operator">&gt;</span> out.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h2 id="_3、安装" tabindex="-1"><a class="header-anchor" href="#_3、安装"><span>3、安装</span></a></h2><p>安装 libunwind： <code>sudo apt install libunwind-dev</code></p><p>安装 gperftools：下载源码，<code>./configure &amp; make &amp; sudo make install</code></p><br><h2 id="_4、交叉编译" tabindex="-1"><a class="header-anchor" href="#_4、交叉编译"><span>4、交叉编译</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>export PATH=$PATH:/opt/mips-gcc540-glibc222-64bit-r3.3.0/bin
export CC=mips-linux-uclibc-gnu-gcc
export CXX=mips-linux-uclibc-gnu-g++
export AR=mips-linux-uclibc-gnu-ar
export RANLIB=mips-linux-uclibc-gnu-ranlib
export LD=mips-linux-uclibc-gnu-ld
./autogen.sh
./configure --prefix=/home/miller/project/gperftools/output/m219e --host=mips-linux
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_5、常见问题" tabindex="-1"><a class="header-anchor" href="#_5、常见问题"><span>5、常见问题</span></a></h2><h3 id="signal-handler-27-被占用" tabindex="-1"><a class="header-anchor" href="#signal-handler-27-被占用"><span>signal handler 27 被占用</span></a></h3><p>其他调试工具，例如 gprof 占用了，去掉编译选项 -pd</p><br><h3 id="跟踪堆" tabindex="-1"><a class="header-anchor" href="#跟踪堆"><span>跟踪堆</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#if USE_GPEFTOOL
#include &lt;gperftools/malloc_extension_c.h&gt;
#endif

int GetHeapSize() 
{
    #if USE_GPEFTOOL
    size_t heap_size;
    if (MallocExtension_GetNumericProperty(&quot;generic.heap_size&quot;, &amp;heap_size)) {
        XLOG_WARN(&quot;Heap size: %lu\\n&quot;, heap_size);
    } else {
        XLOG_ERROR(&quot;Failed to get heap size.\\n&quot;);
    }
    #endif
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_6、参考链接" tabindex="-1"><a class="header-anchor" href="#_6、参考链接"><span>6、参考链接</span></a></h2>`,57),c={href:"https://gperftools.github.io/gperftools/",target:"_blank",rel:"noopener noreferrer"};function u(v,h){const a=s("ExternalLinkIcon");return i(),l("div",null,[o,e("p",null,[e("a",c,[t("gperftools 官方文档"),r(a)])])])}const b=n(p,[["render",u],["__file","gperf使用.html.vue"]]),g=JSON.parse('{"path":"/learn/linux/gperf%E4%BD%BF%E7%94%A8.html","title":"gperftools 使用","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"内存检测","slug":"内存检测","link":"#内存检测","children":[]},{"level":2,"title":"1、使用方法 - 预加载方式","slug":"_1、使用方法-预加载方式","link":"#_1、使用方法-预加载方式","children":[]},{"level":2,"title":"2、使用方法 - 头文件方式","slug":"_2、使用方法-头文件方式","link":"#_2、使用方法-头文件方式","children":[]},{"level":2,"title":"2、生成分析报告","slug":"_2、生成分析报告","link":"#_2、生成分析报告","children":[{"level":3,"title":"2.1 heap profiler","slug":"_2-1-heap-profiler","link":"#_2-1-heap-profiler","children":[]},{"level":3,"title":"2.2 profiler","slug":"_2-2-profiler","link":"#_2-2-profiler","children":[]}]},{"level":2,"title":"3、安装","slug":"_3、安装","link":"#_3、安装","children":[]},{"level":2,"title":"4、交叉编译","slug":"_4、交叉编译","link":"#_4、交叉编译","children":[]},{"level":2,"title":"5、常见问题","slug":"_5、常见问题","link":"#_5、常见问题","children":[{"level":3,"title":"signal handler 27 被占用","slug":"signal-handler-27-被占用","link":"#signal-handler-27-被占用","children":[]},{"level":3,"title":"跟踪堆","slug":"跟踪堆","link":"#跟踪堆","children":[]}]},{"level":2,"title":"6、参考链接","slug":"_6、参考链接","link":"#_6、参考链接","children":[]}],"git":{"updatedTime":1713184188000,"contributors":[{"name":"huangmingle","email":"huangmingle@goke.com","commits":1}]},"filePathRelative":"learn/linux/gperf使用.md"}');export{b as comp,g as data};
